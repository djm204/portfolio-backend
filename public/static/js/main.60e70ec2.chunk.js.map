{"version":3,"sources":["components/layout/Header.tsx","components/layout/Footer.tsx","components/layout/InfoSection.tsx","components/Image.tsx","pages/Home/Bio.tsx","pages/Home/Home.tsx","pages/TechSummary/TechSummary.tsx","pages/CatStats/CatStats.tsx","pages/Contact/ContactInfoRow.tsx","helpers/api.ts","pages/Contact/Contact.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","Fragment","className","to","Footer","Date","getFullYear","InfoSection","props","cnames","classnames","children","Image","imgClasses","src","imgUrl","alt","altText","Bio","bioText","Home","bioPicUrl","TechSummary","CatStats","ContactInfoRow","type","iconClass","contactProfileUrl","title","href","request","a","fetch","url","response","ok","Error","statusText","json","Contact","useState","contactInfo","setContactInfo","useEffect","get","map","contact","key","JSON","stringify","renderContactInfo","App","id","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAkBeA,EAfA,WACb,OACE,kBAAC,IAAMC,SAAP,KACE,4BAAQC,UAAU,cAChB,6BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,iBAAT,gBACA,kBAAC,IAAD,CAAMA,GAAG,cAAT,aACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,eCDKC,EARA,WACX,OACI,gCACI,2DAAkC,IAAIC,MAAOC,iB,iBCG5CC,EAAmD,SAACC,GAC7D,OACI,yBAAKN,UAAWO,IAAO,eAAgBD,EAAME,aACxCF,EAAMG,WCOJC,EARD,SAACJ,GACX,OACI,yBAAKN,UAAWO,IAAO,gBAAiBD,EAAMK,aAC1C,yBAAKC,IAAKN,EAAMO,OAAQC,IAAKR,EAAMS,YCChCC,EARH,SAACV,GACT,OACI,yBAAKN,UAAU,OACVM,EAAMW,UC0BJC,EA1B4B,SAACZ,GACxC,OACI,yBAAKN,UAAU,QACX,kBAAC,EAAD,KACI,yBAAKA,UAAU,eACX,yBAAKA,UAAU,mBACX,kBAAC,EAAD,CACIW,WAAW,cACXE,OAAQP,EAAMa,WAAa,GAC3BJ,QAAQ,iBACZ,wBAAIf,UAAU,SACV,kDAGA,+BAKR,kBAAC,EAAD,CAAKiB,QAAQ,8BClBlBG,EARK,WAChB,OACI,kBAAC,IAAMrB,SAAP,qBCMOsB,EARE,WACb,OACI,kBAAC,IAAMtB,SAAP,mB,QCIKuB,EAAiB,SAAChB,GAAgC,IACnDiB,EAAuCjB,EAAvCiB,KAAMC,EAAiClB,EAAjCkB,UAAWC,EAAsBnB,EAAtBmB,kBACzB,OACI,kBAAC,IAAM1B,SAAP,KACI,6BACI,uBAAGC,UAAWwB,IACd,uBAAGE,MAAOH,EAAMI,KAAMF,GAAoBA,M,+ECVnD,WAAsBG,GAAtB,eAAAC,EAAA,sEACoBC,MAAMF,EAAQG,KADlC,WACGC,EADH,QAGWC,GAHX,sBAIO,IAAIC,MAAMF,EAASG,YAJ1B,gCAOIH,EAASI,QAPb,4C,sBCIP,IAsBeC,EAtBkC,SAAC/B,GAAyB,IAAD,EAChCgC,qBADgC,mBAC/DC,EAD+D,KAClDC,EADkD,KAEtEA,EAAelC,GAGfmC,qBAAU,WACN,IAAMF,EDVP,SAAP,kCCU4BG,CAAI,CAAEX,IAAK,iBAC/BS,EAAeD,KAChB,IAKH,OACI,yBAAKvC,UAAU,gBACX,0CACA,mGANkB,SAACuC,GAAD,OACtBA,EAAYI,KAAI,SAAAC,GAAO,OAAI,kBAAC,EAAD,eAAgBC,IAAKC,KAAKC,UAAUH,IAAcA,OAMxEI,CAAkBT,K,OCEhBU,EAlBH,WACV,OACE,kBAAC,IAAD,KACE,yBAAKC,GAAG,iBACN,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnC,IACjC,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,gBAAgBC,UAAWjC,IAC7C,kBAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,aAAaC,UAAWhC,IAC1C,kBAAC,IAAD,CAAO8B,OAAK,EAACC,KAAK,WAAWC,UAAWhB,IAJ1C,QAMA,kBAAC,EAAD,SCRYiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.60e70ec2.chunk.js","sourcesContent":["import React from 'react';\nimport { HashRouter as Route, Link } from 'react-router-dom';\n\nconst Header = () => {\n  return (\n    <React.Fragment>\n      <header className=\"App-header\">\n        <nav>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/tech-summary\">Tech Summary</Link>\n          <Link to=\"/cat-stats\">Cat Stats</Link>\n          <Link to=\"/contact\">Contact</Link>\n        </nav>\n      </header>\n    </React.Fragment>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <div>&copy; David Mendez  2010 - {new Date().getFullYear()}</div>\n        </footer>\n    );\n}\n\nexport default Footer;\n","import React, { FunctionComponent, ReactNode } from 'react';\nimport cnames from 'classnames';\n\ntype InfoSectionProps = {\n    classnames?: Array<string> | string,\n    children: ReactNode\n}\n\nexport const InfoSection: FunctionComponent<InfoSectionProps> = (props: InfoSectionProps) => {\n    return (\n        <div className={cnames('info-section', props.classnames)}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default InfoSection;\n","import React from 'react';\nimport cnames from 'classnames';\n\ntype Image = {\n    imgUrl: string,\n    altText: string,\n    imgClasses?: Array<string> | string\n    title?: string\n}\n\nconst Image = (props: Image) => {\n    return (\n        <div className={cnames(\"image-wrapper\", props.imgClasses)}>\n            <img src={props.imgUrl} alt={props.altText} />\n        </div>\n    );\n}\n\nexport default Image;\n","import React from 'react';\n\ntype BioProps = {\n    bioText: string\n}\n\nconst Bio = (props: BioProps) => {\n    return (\n        <div className=\"bio\">\n            {props.bioText}\n        </div>\n    );\n}\n\nexport default Bio;\n","import React, { FunctionComponent } from 'react';\nimport { InfoSection } from '../../components/layout/InfoSection';\nimport Image from '../../components/Image';\nimport Bio from './Bio';\n\ntype HomeProps = {\n    bioPicUrl?: string\n}\n\nconst Home: FunctionComponent<HomeProps> = (props: HomeProps) => {\n    return (\n        <div className=\"home\">\n            <InfoSection>\n                <div className=\"bio-wrapper\">\n                    <div className=\"image-and-brief\">\n                        <Image\n                            imgClasses=\"bio-picture\"\n                            imgUrl={props.bioPicUrl || ''}\n                            altText=\"David Mendez\" />\n                        <ul className=\"brief\">\n                            <li>\n                                Name: David Mendez\n                                </li>\n                            <li>\n\n                            </li>\n                        </ul>\n                    </div>\n                    <Bio bioText=\"look how awesome I am\" />\n                </div>\n            </InfoSection>\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\n\nconst TechSummary = () => {\n    return (\n        <React.Fragment>\n            TechSummary\n        </React.Fragment>\n    );\n}\n\nexport default TechSummary;","import React from 'react';\n\nconst CatStats = () => {\n    return (\n        <React.Fragment>\n            cat stats\n        </React.Fragment>\n    );\n}\n\nexport default CatStats;","import React from 'react';\n\nexport type ContactInfoRowProps = {\n    type: string,\n    iconClass?: string,\n    contactProfileUrl: string\n}\n\nexport const ContactInfoRow = (props: ContactInfoRowProps) => {\n    const { type, iconClass, contactProfileUrl } = props;\n    return (\n        <React.Fragment>\n            <div>\n                <i className={iconClass}></i>\n                <a title={type} href={contactProfileUrl}>{contactProfileUrl}</a>\n            </div>\n        </React.Fragment>\n    );\n}\n","import \"promise/polyfill\"\nimport \"whatwg-fetch\"\nimport * as globalTypes from '../types/global'\n\nexport async function get<T>(request: globalTypes.ApiRequest): Promise<T> {\n    const response = await fetch(request.url)\n\n    if (!response.ok) {\n        throw new Error(response.statusText)\n    }\n\n    return response.json() as Promise<T>\n}\n\nexport async function post<T>(request: globalTypes.ApiRequest): Promise<T> {\n    const payload = {\n        method: 'POST',\n        body: JSON.stringify(request.payload)\n    }\n\n    const response = await fetch(request.url, payload)\n\n    if (!response.ok) {\n        throw new Error(response.statusText)\n    }\n\n    return response.json() as Promise<T>\n}\n\nexport async function put<T>(request: globalTypes.ApiRequest): Promise<T> {\n    const payload = {\n        method: 'PUT',\n        body: JSON.stringify(request.payload)\n    }\n\n    const response = await fetch(request.url, payload)\n\n    if (!response.ok) {\n        throw new Error(response.statusText)\n    }\n\n    return response.json() as Promise<T>\n}\n\nexport async function del<T>(request: globalTypes.ApiRequest): Promise<T> {\n    const payload = {\n        method: 'DELETE',\n        body: JSON.stringify(request.payload)\n    }\n\n    const response = await fetch(request.url, payload)\n\n    if (!response.ok) {\n        throw new Error(response.statusText)\n    }\n\n    return response.json() as Promise<T>\n}\n\nexport async function patch<T>(request: globalTypes.ApiRequest): Promise<T> {\n    const payload = {\n        method: 'PATCH',\n        body: JSON.stringify(request.payload)\n    }\n\n    const response = await fetch(request.url, payload)\n\n    if (!response.ok) {\n        throw new Error(response.statusText)\n    }\n\n    return response.json() as Promise<T>\n}","import React, { useState, useEffect, FunctionComponent } from 'react';\nimport { ContactInfoRow, ContactInfoRowProps } from './ContactInfoRow'\nimport { get } from '../../helpers/api';\n\ntype ContactProps = {\n    contactInfo: Array<ContactInfoRowProps>\n}\n\nconst Contact: FunctionComponent<ContactProps> = (props: ContactProps) => {\n    const [contactInfo, setContactInfo] = useState();\n    setContactInfo(props);\n\n    //ComponentDidMount\n    useEffect(() => {\n        const contactInfo = get({ url: '/contactInfo' });\n        setContactInfo(contactInfo);\n    }, []);\n\n    const renderContactInfo = (contactInfo: Array<ContactInfoRowProps>) =>\n        contactInfo.map(contact => <ContactInfoRow key={JSON.stringify(contact)} {...contact} />);\n\n    return (\n        <div className=\"contact-page\">\n            <h1>Contact Me</h1>\n            <p>If you would like to reach me feel free to use any of the following:</p>\n            {renderContactInfo(contactInfo)}\n        </div>\n    );\n}\n\nexport default Contact;","import React from 'react';\nimport Header from './components/layout/Header';\nimport Footer from './components/layout/Footer';\nimport Home from './pages/Home/Home';\nimport TechSummary from './pages/TechSummary/TechSummary';\nimport CatStats from './pages/CatStats/CatStats';\nimport Contact from './pages/Contact/Contact';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <Router>\n      <div id=\"app-container\">\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/tech-summary\" component={TechSummary} />\n          <Route exact path=\"/cat-stats\" component={CatStats} />\n          <Route exact path=\"/contact\" component={Contact} />} />\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}